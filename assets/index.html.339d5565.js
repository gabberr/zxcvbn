import{_ as d,r,o,c as i,b as t,a as s,e as a,d as e}from"./app.5d2a72b5.js";const h={},c=a('<h1 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h1><h2 id="setoptions" tabindex="-1"><a class="header-anchor" href="#setoptions" aria-hidden="true">#</a> setOptions</h2><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>dictionary</td><td>Object</td><td>{}</td><td>Dictionaries for password comparison with common words/names etc.</td></tr><tr><td>graphs</td><td>Object</td><td>{}</td><td>Keyboard layout to check for patterns on different kind of keyboards</td></tr><tr><td>l33tTable</td><td>Object</td><td>L33tTable</td><td>Table with matching alphabetical chars into numbers and special chars</td></tr><tr><td>translations</td><td>Object</td><td>Translations keys</td><td>Translations for the feedback</td></tr><tr><td>useLevenshteinDistance</td><td>Boolean</td><td>false</td><td>Activate levenshtein</td></tr><tr><td>levenshteinThreshold</td><td>number</td><td>2</td><td>Threshold for levenshtein</td></tr></tbody></table><h3 id="dictionary" tabindex="-1"><a class="header-anchor" href="#dictionary" aria-hidden="true">#</a> dictionary</h3><p>By default, there are no dictionaries, they are in the language packages. There is an exceptional language package <code>common</code> which includes dictionaries that transcend languages like a password dictionary. It is highly recommended using at least the common and english language package to get a good result.</p><h3 id="graphs" tabindex="-1"><a class="header-anchor" href="#graphs" aria-hidden="true">#</a> graphs</h3><p>By default, there are no keyboard layouts used. It is recommended to add the common keyboard layout from the common language package Currently these keyboard layouts are supported:</p><ul><li>azerty</li><li>dvorak</li><li>keypads</li><li>qwerty</li><li>qwertz</li></ul><h3 id="l33ttable" tabindex="-1"><a class="header-anchor" href="#l33ttable" aria-hidden="true">#</a> l33tTable</h3>',9),l=e("This is a table with matches for letters from numbers and special characters in the context of "),u={href:"https://en.wikipedia.org/wiki/Leet",target:"_blank",rel:"noopener noreferrer"},p=e("Leet speak"),f=e(". E.g. an "),m=t("code",null,"a",-1),b=e(" can be written with "),_=t("code",null,"4",-1),y=e(" or "),g=t("code",null,"@",-1),k=e(". Normally you don't need to adjust this options. If you find something missing in this table, feel free to open an issue or a PR."),v=a('<h3 id="translations" tabindex="-1"><a class="header-anchor" href="#translations" aria-hidden="true">#</a> translations</h3><p>By default, every feedback is a key. If you want to get real translated feedback you can use one of the <a href="../languages">language</a> packages.</p><h3 id="uselevenshteindistance" tabindex="-1"><a class="header-anchor" href="#uselevenshteindistance" aria-hidden="true">#</a> useLevenshteinDistance</h3><p>This variable is to activate the levenshtein distance check on the dictionary matcher. This will decrease the performance, and it is recommended to use the debounce helper.</p><h3 id="levenshteinthreshold" tabindex="-1"><a class="header-anchor" href="#levenshteinthreshold" aria-hidden="true">#</a> levenshteinThreshold</h3><p>This variable is to define the threshold of the levenshtein check</p><h2 id="addmatcher" tabindex="-1"><a class="header-anchor" href="#addmatcher" aria-hidden="true">#</a> addMatcher</h2><p>With this function you can add your own matcher for more information checkout the <a href="../matcher">matcher documentation</a></p>',8);function x(w,T){const n=r("ExternalLinkIcon");return o(),i("div",null,[c,t("p",null,[l,t("a",u,[p,s(n)]),f,m,b,_,y,g,k]),v])}var L=d(h,[["render",x],["__file","index.html.vue"]]);export{L as default};
