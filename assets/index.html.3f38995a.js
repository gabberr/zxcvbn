import{_ as e,r as t,o,c,b as a,a as i,e as p,d as n}from"./app.5d2a72b5.js";const r={},l=p(`<h1 id="matcher" tabindex="-1"><a class="header-anchor" href="#matcher" aria-hidden="true">#</a> Matcher</h1><p>There are multiple build in matchers to identify the strength of a password. All build in matchers are sync but custom matcher have the possibility to be async. Therefor if you are using an async custom matcher you need to use the <code>zxcvbnAsync</code> function.</p><h2 id="bruteforce" tabindex="-1"><a class="header-anchor" href="#bruteforce" aria-hidden="true">#</a> bruteforce</h2><p>The bruteforce is the matcher that needs to be used last, in order to check if the password can be guessed by brute force</p><h2 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> date</h2><p>The date matcher tries to find dates inside a password for example 2020-05-05 or dates without separators.</p><h2 id="dictionary" tabindex="-1"><a class="header-anchor" href="#dictionary" aria-hidden="true">#</a> dictionary</h2><p>The dictionary matcher tries to find a word inside one of the dictionaries that you provided from the language packages or by yourself. There are three variants of it.</p><ol><li>Plain: It will just search for the exact word in the dictionaries</li><li>Reverse: It will reverse the password and search the dictionaries</li><li>L33t: It will transform l33t speak to normal characters and search the dictionaries for example <code>P4$$w0rd</code> will be transformed to <code>Password</code></li></ol><h2 id="regex" tabindex="-1"><a class="header-anchor" href="#regex" aria-hidden="true">#</a> regex</h2><p>The regex matcher tries to find a string by a regex. Currently, it is only one regex with the recent years</p><h2 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat" aria-hidden="true">#</a> repeat</h2><p>The repeat matcher tries to find repeated patterns like <code>aaaaaaa</code> or <code>byebyebye</code></p><h2 id="sequence" tabindex="-1"><a class="header-anchor" href="#sequence" aria-hidden="true">#</a> sequence</h2><p>The sequence matcher tries to identify sequences by looking for repeated differences in unicode codepoint for example <code>abcdef</code> or <code>1234567</code></p><h2 id="spatial" tabindex="-1"><a class="header-anchor" href="#spatial" aria-hidden="true">#</a> spatial</h2><p>The spatial matcher tries to find patterns from keyboard layout for example <code>qwertz</code></p><h2 id="custom" tabindex="-1"><a class="header-anchor" href="#custom" aria-hidden="true">#</a> custom</h2><p>You can create matcher if you need which can be async. If you create an async matcher you should debounce the function. For this you can use the included debounce function</p><h3 id="create-a-custom-matcher" tabindex="-1"><a class="header-anchor" href="#create-a-custom-matcher" aria-hidden="true">#</a> create a custom matcher</h3><p>This is an example to create a custom matcher to check for the minLength. The scoring is just for showing purpose and should be adjusted to your needs. Be aware that we don&#39;t recommend using a minLength matcher</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> zxcvbnOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@zxcvbn-ts/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  MatchEstimated<span class="token punctuation">,</span>
  ExtendedMatch<span class="token punctuation">,</span>
  Matcher<span class="token punctuation">,</span>
  Match<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@zxcvbn-ts/core/dist/types&#39;</span>

<span class="token keyword">const</span> minLengthMatcher<span class="token operator">:</span> Matcher <span class="token operator">=</span> <span class="token punctuation">{</span>
  Matching<span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name">MatchMinLength</span> <span class="token punctuation">{</span>
    minLength <span class="token operator">=</span> <span class="token number">10</span>

    <span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">{</span> password <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> password<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> matches<span class="token operator">:</span> Match<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        matches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          pattern<span class="token operator">:</span> <span class="token string">&#39;minLength&#39;</span><span class="token punctuation">,</span>
          token<span class="token operator">:</span> password<span class="token punctuation">,</span>
          i<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
          j<span class="token operator">:</span> password<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> matches
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">feedback</span><span class="token punctuation">(</span>match<span class="token operator">:</span> MatchEstimated<span class="token punctuation">,</span> isSoleMatch<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      warning<span class="token operator">:</span> <span class="token string">&#39;You password is not long enough&#39;</span><span class="token punctuation">,</span>
      suggestions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">scoring</span><span class="token punctuation">(</span>match<span class="token operator">:</span> ExtendedMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will take the length of the password and multiple it by 10</span>
    <span class="token comment">// to create a higher scoring the more characters are added</span>
    <span class="token keyword">return</span> match<span class="token punctuation">.</span>token<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">10</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

zxcvbnOptions<span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span><span class="token string">&#39;minLength&#39;</span><span class="token punctuation">,</span> minLengthMatcher<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="matcher-libraries" tabindex="-1"><a class="header-anchor" href="#matcher-libraries" aria-hidden="true">#</a> Matcher libraries</h2><p>There are different matcher libraries that can extend the core matchers</p><h3 id="zxcvbn-ts-matcher-pwned" tabindex="-1"><a class="header-anchor" href="#zxcvbn-ts-matcher-pwned" aria-hidden="true">#</a> @zxcvbn-ts/matcher-pwned</h3>`,25),d=n("The pwned matcher is an async matcher that will make a k-anonymity password request to the "),u={href:"https://haveibeenpwned.com/",target:"_blank",rel:"noopener noreferrer"},h=n("have i been pwned"),k=n(" api. If you bind zxcvbn-ts to your input field and execute the function on every new character typed, be sure to use the provided debounce function.");function m(b,v){const s=t("ExternalLinkIcon");return o(),c("div",null,[l,a("p",null,[d,a("a",u,[h,i(s)]),k])])}var y=e(r,[["render",m],["__file","index.html.vue"]]);export{y as default};
